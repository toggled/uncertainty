#!/usr/bin/env python
# coding: utf-8


import os
import argparse
from tqdm import tqdm
#copy and paste this file in the folder where the files generated by the C code are 
# for instance for the test_graph, copy the file where the files test_graph.txt_query_subgraph_0_1.txt, etc. are
# then just run it, it will generate a new folder and insert the correct file with the new format in the folder


#!/usr/bin/env python
# coding: utf-8
parser = argparse.ArgumentParser()

parser.add_argument("-d", "--dataset", type=str, default="default",help="The directory name of Relcomp generated output")
parser.add_argument("-mq","--maxquery",type=int, default = 100, help="# of Queries to process")
parser.add_argument('-q','--queryf', type=str,help='query file',default = None) # 'data/queries/ER/ER_15_22_2.queries'

args = parser.parse_args()

maxQ = args.maxquery
queryfile = args.queryf
def comp_subgraph(name, outname):
    print(name)
    f_orig=open(name, "r")
    f_fin=open(outname, "w")
    lines=f_orig.readlines()
    if len(lines)==0:
        print(lines)
        print('empty subgraph')
        return

    l=6
    if lines[l]=="0\n": 
        l+=2
    else:
        real_edge_num=int(lines[l])
        l+=1
        while l< len(lines):
            w=lines[l].replace("\n", "")
            w=w.replace("\t", " ")
            f_fin.write(w+" ")
            l+=1
            e=int(lines[l].replace("\n", ""))
            for j in range(1,e+1):
                w2=lines[l+j].replace("\n", "")
                w2=w2.replace("\t", " ")
                f_fin.write(w2+"\n")
                if e-j>=1:
                    f_fin.write(w+" ")
            real_edge_num-=1
            l=l+e+1
            if real_edge_num==0:
                l+=1 
                break   
    while l< len(lines):
        w=lines[l].replace("\n", "")
        w=w.replace("\t", " ")
        f_fin.write(w+" ")
        l+=1
        e=int(lines[l].replace("\n", ""))
        for j in range(1,e+1):
            w2=lines[l+j].replace("\n", "")
            w2=w2.replace("\t", " ")
            f_fin.write(w2+"\n")
            if e-j>=1:
                f_fin.write(w+" ")
        l=l+e+1
        if lines[l]=="0\n":
            f_fin.close()
            break
        
if __name__ == '__main__':
    directory = args.dataset 
    if not os.path.exists(directory+"_subg"):
        print('making new directory: ',directory+"_subg/")
        os.mkdir(directory+"_subg/")
    else:
        #for filename in tqdm(os.listdir(directory)):
        queries = {}
        assert queryfile is not None, "Provide query file"

        with open(queryfile,'r') as f:
            count = 0
            for line in f:
                u,v = line.split()
                u,v = int(u.strip()), int(v.strip())
                queries[u] = v
                count += 1
                if maxQ!=-1 and count>=maxQ:
                    break
        for filename in tqdm(os.listdir(directory)):
            uv = filename.split(".")[-2].split("_")[-2:] #("biomine.txt_query_subgraph_1005953_628518.txt")
            if not uv[0].startswith('txt'):
                u,v = int(uv[0].strip()), int(uv[1].strip())
            if u not in queries:
                print((u,v),' not in top-',maxQ,'queries')
            else:
                outfile = os.path.join(directory+"_subg/",filename)
                print('outfile: ',outfile)
                if os.path.isfile(outfile): # Skip outputs that are already generated
                    continue 
                if filename.endswith(".txt") and "query_subgraph" in filename:
                    print('generating subgraph from: ',filename, 'in directory: ',directory+"_subg/")
                    comp_subgraph(os.path.join(directory,filename), outfile)